name: CI/CD Pipeline - Cotador de Moedas

# Executa em push para master/main
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: # Permite execu√ß√£o manual

# Vari√°veis globais
env:
  PYTHON_VERSION: '3.13'

jobs:
  # JOB 1: TESTES UNIT√ÅRIOS
  tests:
    name: üß™ Executar Testes Unit√°rios  
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: üêç Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install typer rich requests pytest pytest-mock pytest-html pytest-cov
        
    - name: üß™ Executar testes unit√°rios
      run: |
        python -m pytest tests/ -v
        
    - name: üìä Gerar relat√≥rios (se dispon√≠vel)
      run: |
        python -m pytest tests/ -v --html=tests/report.html --self-contained-html --cov=src --cov-report=html --cov-report=xml || echo "Relat√≥rios opcionais n√£o gerados"
        
    - name: üìä Upload do relat√≥rio de testes
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          tests/report.html
          htmlcov/
          coverage.xml

  # JOB 2: BUILD E EMPACOTAMENTO  
  build:
    name: üèóÔ∏è Build e Empacotamento
    runs-on: ubuntu-latest
    needs: tests # S√≥ executa se os testes passaram
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: üêç Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Instalar depend√™ncias de build
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install typer rich requests
        
    - name: üèóÔ∏è Criar distribui√ß√£o
      run: |
        # Criar estrutura para empacotamento
        mkdir -p dist
        
        # Copiar arquivos do projeto
        cp -r src/ dist/
        cp README.md dist/
        cp pyproject.toml dist/
        
        # Criar arquivo de vers√£o
        echo "$(date '+%Y.%m.%d.%H%M%S')" > dist/VERSION
        
        # Criar arquivo ZIP
        cd dist
        zip -r ../cotador-moedas-$(date '+%Y%m%d-%H%M%S').zip .
        cd ..
        
        # Criar tarball
        tar -czf cotador-moedas-$(date '+%Y%m%d-%H%M%S').tar.gz -C dist .
        
    - name: üì¶ Upload dos artefatos de build
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          *.zip
          *.tar.gz
          dist/

  # JOB 3: NOTIFICA√á√ÉO (executa em paralelo)
  notification:
    name: üìß Notifica√ß√£o por Email
    runs-on: ubuntu-latest
    # Este job roda em paralelo com os outros (n√£o tem 'needs')
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
      
    - name: üêç Configurar Python para script de email
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üìß Executar script de notifica√ß√£o
      env:
        EMAIL_DESTINO: ${{ secrets.EMAIL_DESTINO || 'roger.pereira@ges.inatel.br' }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        python3 << 'EOF'
        import os
        import smtplib
        import ssl
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        
        def enviar_notificacao():
            print("üöÄ Pipeline executado!")
            print(f"üìß Email de destino: {os.getenv('EMAIL_DESTINO', 'N√£o configurado')}")
            print(f"üë§ Executado por: {os.getenv('GITHUB_ACTOR', 'Desconhecido')}")
            print(f"üìÇ Reposit√≥rio: {os.getenv('GITHUB_REPOSITORY', 'Desconhecido')}")
            print(f"üåø Branch: {os.getenv('GITHUB_REF', 'Desconhecido').replace('refs/heads/', '')}")
            print(f"üîó Commit: {os.getenv('GITHUB_SHA', 'Desconhecido')[:8]}...")
            print(f"‚è∞ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            print("‚úÖ Notifica√ß√£o de pipeline executada com sucesso!")
            print("üìù Em um ambiente real, aqui seria enviado um email usando SMTP")
            
            # Simular conte√∫do do email
            email_content = f"""
            üéâ PIPELINE CI/CD EXECUTADO COM SUCESSO! üéâ
            
            üìã DETALHES:
            ‚Ä¢ Reposit√≥rio: {os.getenv('GITHUB_REPOSITORY', 'Cotador-de-moeda-API')}
            ‚Ä¢ Branch: {os.getenv('GITHUB_REF', 'master').replace('refs/heads/', '')}
            ‚Ä¢ Commit: {os.getenv('GITHUB_SHA', 'abc123')[:8]}
            ‚Ä¢ Executado por: {os.getenv('GITHUB_ACTOR', 'Desenvolvedor')}
            ‚Ä¢ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            ‚úÖ Status: Pipeline executado com sucesso!
            üß™ Testes: Executados
            üèóÔ∏è Build: Completo  
            üì¶ Artefatos: Gerados
            
            --
            Sistema automatizado de CI/CD
            Cotador de Moedas API
            """
            
            print("üì¨ CONTE√öDO DO EMAIL:")
            print("-" * 50)
            print(email_content)
            print("-" * 50)
            
            # Em produ√ß√£o, aqui voc√™ configuraria:
            # smtp_server = "smtp.gmail.com"
            # port = 587
            # sender_email = os.getenv('SENDER_EMAIL')
            # password = os.getenv('EMAIL_PASSWORD') 
            # recipient = os.getenv('EMAIL_DESTINO')
            
        if __name__ == "__main__":
            enviar_notificacao()
        EOF

  # JOB 4: RESULTADO FINAL
  pipeline-success:
    name: ‚úÖ Pipeline Conclu√≠do
    runs-on: ubuntu-latest
    needs: [tests, build] # Aguarda tests e build (notification roda em paralelo)
    if: success()
    
    steps:
    - name: üéâ Pipeline executado com sucesso
      run: |
        echo "üéâ Pipeline executado com sucesso!"
        echo "‚úÖ Testes: OK | Build: OK | Notifica√ß√£o: OK"
        echo "ÔøΩ Artefatos gerados e armazenados"

  # JOB 5: FALHA NO PIPELINE
  pipeline-failure:
    name: ‚ùå Pipeline Falhou
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: failure()
    
    steps:
    - name: ‚ùå Pipeline falhou
      run: |
        echo "‚ùå Pipeline falhou - verificar logs"
        exit 1